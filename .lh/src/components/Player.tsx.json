{
    "sourceFile": "src/components/Player.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740726708701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740743907835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         console.error(\"Playback failed:\", error);\r\n         setIsPlaying(false);\r\n       });\r\n     }\r\n-    setIsPlaying(!isPlaying);\r\n+    setIsPlaying(isPlaying);\r\n   }, [isPlaying, currentSong]);\r\n \r\n   const handleVolumeChange = useCallback(\r\n     (e: React.ChangeEvent<HTMLInputElement>) => {\r\n"
                },
                {
                    "date": 1740744241736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n   const [volume, setVolume] = useState<number>(100);\r\n   const [isMuted, setIsMuted] = useState<boolean>(false);\r\n   const [isLoading, setIsLoading] = useState<boolean>(true);\r\n \r\n-  const audioRef = useRef<HTMLAudioElement | null>(null); // Typed as HTMLAudioElement or null\r\n-  const progressBarRef = useRef<HTMLDivElement | null>(null); // Typed as HTMLDivElement or null\r\n+  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n+  const progressBarRef = useRef<HTMLDivElement | null>(null);\r\n \r\n   // Find artist associated with the current song\r\n   const artist = Artist.find((artist) => artist.id === currentSong?.artistId);\r\n \r\n@@ -43,9 +43,9 @@\n         console.error(\"Playback failed:\", error);\r\n         setIsPlaying(false);\r\n       });\r\n     }\r\n-    setIsPlaying(isPlaying);\r\n+    setIsPlaying((prev) => !prev);\r\n   }, [isPlaying, currentSong]);\r\n \r\n   const handleVolumeChange = useCallback(\r\n     (e: React.ChangeEvent<HTMLInputElement>) => {\r\n@@ -100,10 +100,16 @@\n       setIsLoading(false);\r\n       return;\r\n     }\r\n \r\n-    const audio = new Audio(currentSong.audio);\r\n-    audioRef.current = audio;\r\n+    if (!audioRef.current) {\r\n+      audioRef.current = new Audio();\r\n+    }\r\n+\r\n+    const audio = audioRef.current;\r\n+    audio.src = currentSong.audio;\r\n+    audio.volume = volume / 100;\r\n+\r\n     setIsLoading(true);\r\n \r\n     const handleLoadedMetadata = () => {\r\n       setDuration(audio.duration);\r\n@@ -118,30 +124,16 @@\n       setIsPlaying(false);\r\n       handleNext();\r\n     };\r\n \r\n-    const handleError = (event: ErrorEvent) => {\r\n-      const error = event.error;\r\n-      console.error(\"Audio error:\", error);\r\n-      setIsLoading(false);\r\n-      setIsPlaying(false);\r\n-    };\r\n-\r\n     audio.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\r\n     audio.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n     audio.addEventListener(\"ended\", handleEnded);\r\n-    audio.addEventListener(\"error\", handleError);\r\n \r\n-    // Set initial volume\r\n-    audio.volume = volume / 100;\r\n-\r\n     // Auto play the new song\r\n     audio\r\n       .play()\r\n-      .then(() => {\r\n-        setIsPlaying(true);\r\n-        setIsLoading(false);\r\n-      })\r\n+      .then(() => setIsPlaying(true))\r\n       .catch((error) => {\r\n         console.error(\"Auto-play failed:\", error);\r\n         setIsLoading(false);\r\n       });\r\n@@ -150,12 +142,10 @@\n       audio.pause();\r\n       audio.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\r\n       audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n       audio.removeEventListener(\"ended\", handleEnded);\r\n-      audio.removeEventListener(\"error\", handleError);\r\n-      audioRef.current = null;\r\n     };\r\n-  }, [currentSong, volume, handleNext]);\r\n+  }, [currentSong, handleNext]);\r\n \r\n   // Keyboard controls\r\n   useEffect(() => {\r\n     const handleKeyPress = (e: KeyboardEvent) => {\r\n@@ -192,9 +182,9 @@\n   return (\r\n     <footer className=\"p-4 bg-[#222222] text-white w-full fixed bottom-0 h-[10%] flex items-center justify-center\">\r\n       <div className=\"flex items-center justify-between w-full\">\r\n         {/* Song Info */}\r\n-        <div className=\"flex items-center justify-center\">\r\n+        <div className=\"flex items-center\">\r\n           <img\r\n             src={currentSong.img}\r\n             alt={currentSong.title}\r\n             className=\"h-12 w-12 rounded-md mx-auto object-cover\"\r\n@@ -209,68 +199,22 @@\n \r\n         {/* Player Controls */}\r\n         <div className=\"flex flex-col items-center flex-1 max-w-2xl mx-4\">\r\n           <div className=\"flex items-center gap-4\">\r\n-            <GrCaretPrevious\r\n-              className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\"\r\n-              onClick={handlePrevious}\r\n-            />\r\n-            <button\r\n-              onClick={handlePlayPause}\r\n-              disabled={isLoading}\r\n-              className=\"focus:outline-none\"\r\n-            >\r\n-              {isLoading ? (\r\n-                <div className=\"h-8 w-8 animate-pulse bg-gray-600 rounded-full\" />\r\n-              ) : isPlaying ? (\r\n-                <FaRegPauseCircle className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\" />\r\n-              ) : (\r\n-                <FaPlayCircle className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\" />\r\n-              )}\r\n+            <GrCaretPrevious onClick={handlePrevious} className=\"h-8 w-8 cursor-pointer\" />\r\n+            <button onClick={handlePlayPause} disabled={isLoading}>\r\n+              {isPlaying ? <FaRegPauseCircle className=\"h-8 w-8\" /> : <FaPlayCircle className=\"h-8 w-8\" />}\r\n             </button>\r\n-            <GrCaretNext\r\n-              className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\"\r\n-              onClick={handleNext}\r\n-            />\r\n+            <GrCaretNext onClick={handleNext} className=\"h-8 w-8 cursor-pointer\" />\r\n           </div>\r\n-\r\n-          {/* Progress Bar */}\r\n-          <div className=\"flex items-center gap-3 w-full\">\r\n-            <span className=\"text-xs\">{formatTime(currentTime)}</span>\r\n-            <div\r\n-              ref={progressBarRef}\r\n-              className=\"flex-1 h-1 bg-gray-600 rounded-full cursor-pointer\"\r\n-              onClick={handleProgressClick}\r\n-            >\r\n-              <div\r\n-                className=\"h-full bg-green-500 rounded-full relative\"\r\n-                style={{ width: `${(currentTime / duration) * 100}%` }}\r\n-              >\r\n-                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 w-3 h-3 bg-white rounded-full shadow-md transform scale-0 hover:scale-100 transition-transform\" />\r\n-              </div>\r\n-            </div>\r\n-            <span className=\"text-xs\">{formatTime(duration)}</span>\r\n+          <div ref={progressBarRef} className=\"h-1 bg-gray-600 rounded-full cursor-pointer\" onClick={handleProgressClick}>\r\n+            <div className=\"h-full bg-green-500\" style={{ width: `${(currentTime / duration) * 100}%` }} />\r\n           </div>\r\n         </div>\r\n \r\n         {/* Volume Control */}\r\n-        <div className=\"flex items-center gap-2\">\r\n-          <button onClick={toggleMute} className=\"focus:outline-none\">\r\n-            {isMuted ? (\r\n-              <CiVolumeMute className=\"h-6 w-6 cursor-pointer\" />\r\n-            ) : (\r\n-              <CiVolume className=\"h-6 w-6 cursor-pointer\" />\r\n-            )}\r\n-          </button>\r\n-          <input\r\n-            type=\"range\"\r\n-            min=\"0\"\r\n-            max=\"100\"\r\n-            value={isMuted ? 0 : volume}\r\n-            className=\"w-20 cursor-pointer\"\r\n-            onChange={handleVolumeChange}\r\n-          />\r\n-        </div>\r\n+        <button onClick={toggleMute}>{isMuted ? <CiVolumeMute /> : <CiVolume />}</button>\r\n+        <input type=\"range\" min=\"0\" max=\"100\" value={isMuted ? 0 : volume} onChange={handleVolumeChange} />\r\n       </div>\r\n     </footer>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1740744277742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n   const [volume, setVolume] = useState<number>(100);\r\n   const [isMuted, setIsMuted] = useState<boolean>(false);\r\n   const [isLoading, setIsLoading] = useState<boolean>(true);\r\n \r\n-  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n-  const progressBarRef = useRef<HTMLDivElement | null>(null);\r\n+  const audioRef = useRef<HTMLAudioElement | null>(null); // Typed as HTMLAudioElement or null\r\n+  const progressBarRef = useRef<HTMLDivElement | null>(null); // Typed as HTMLDivElement or null\r\n \r\n   // Find artist associated with the current song\r\n   const artist = Artist.find((artist) => artist.id === currentSong?.artistId);\r\n \r\n@@ -43,9 +43,9 @@\n         console.error(\"Playback failed:\", error);\r\n         setIsPlaying(false);\r\n       });\r\n     }\r\n-    setIsPlaying((prev) => !prev);\r\n+    setIsPlaying(isPlaying);\r\n   }, [isPlaying, currentSong]);\r\n \r\n   const handleVolumeChange = useCallback(\r\n     (e: React.ChangeEvent<HTMLInputElement>) => {\r\n@@ -100,16 +100,10 @@\n       setIsLoading(false);\r\n       return;\r\n     }\r\n \r\n-    if (!audioRef.current) {\r\n-      audioRef.current = new Audio();\r\n-    }\r\n-\r\n-    const audio = audioRef.current;\r\n-    audio.src = currentSong.audio;\r\n-    audio.volume = volume / 100;\r\n-\r\n+    const audio = new Audio(currentSong.audio);\r\n+    audioRef.current = audio;\r\n     setIsLoading(true);\r\n \r\n     const handleLoadedMetadata = () => {\r\n       setDuration(audio.duration);\r\n@@ -124,16 +118,30 @@\n       setIsPlaying(false);\r\n       handleNext();\r\n     };\r\n \r\n+    const handleError = (event: ErrorEvent) => {\r\n+      const error = event.error;\r\n+      console.error(\"Audio error:\", error);\r\n+      setIsLoading(false);\r\n+      setIsPlaying(false);\r\n+    };\r\n+\r\n     audio.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\r\n     audio.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n     audio.addEventListener(\"ended\", handleEnded);\r\n+    audio.addEventListener(\"error\", handleError);\r\n \r\n+    // Set initial volume\r\n+    audio.volume = volume / 100;\r\n+\r\n     // Auto play the new song\r\n     audio\r\n       .play()\r\n-      .then(() => setIsPlaying(true))\r\n+      .then(() => {\r\n+        setIsPlaying(true);\r\n+        setIsLoading(false);\r\n+      })\r\n       .catch((error) => {\r\n         console.error(\"Auto-play failed:\", error);\r\n         setIsLoading(false);\r\n       });\r\n@@ -142,10 +150,12 @@\n       audio.pause();\r\n       audio.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\r\n       audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n       audio.removeEventListener(\"ended\", handleEnded);\r\n+      audio.removeEventListener(\"error\", handleError);\r\n+      audioRef.current = null;\r\n     };\r\n-  }, [currentSong, handleNext]);\r\n+  }, [currentSong, volume, handleNext]);\r\n \r\n   // Keyboard controls\r\n   useEffect(() => {\r\n     const handleKeyPress = (e: KeyboardEvent) => {\r\n@@ -182,9 +192,9 @@\n   return (\r\n     <footer className=\"p-4 bg-[#222222] text-white w-full fixed bottom-0 h-[10%] flex items-center justify-center\">\r\n       <div className=\"flex items-center justify-between w-full\">\r\n         {/* Song Info */}\r\n-        <div className=\"flex items-center\">\r\n+        <div className=\"flex items-center justify-center\">\r\n           <img\r\n             src={currentSong.img}\r\n             alt={currentSong.title}\r\n             className=\"h-12 w-12 rounded-md mx-auto object-cover\"\r\n@@ -200,46 +210,67 @@\n         {/* Player Controls */}\r\n         <div className=\"flex flex-col items-center flex-1 max-w-2xl mx-4\">\r\n           <div className=\"flex items-center gap-4\">\r\n             <GrCaretPrevious\r\n+              className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\"\r\n               onClick={handlePrevious}\r\n-              className=\"h-8 w-8 cursor-pointer\"\r\n             />\r\n-            <button onClick={handlePlayPause} disabled={isLoading}>\r\n-              {isPlaying ? (\r\n-                <FaRegPauseCircle className=\"h-8 w-8\" />\r\n+            <button\r\n+              onClick={handlePlayPause}\r\n+              disabled={isLoading}\r\n+              className=\"focus:outline-none\"\r\n+            >\r\n+              {isLoading ? (\r\n+                <div className=\"h-8 w-8 animate-pulse bg-gray-600 rounded-full\" />\r\n+              ) : isPlaying ? (\r\n+                <FaRegPauseCircle className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\" />\r\n               ) : (\r\n-                <FaPlayCircle className=\"h-8 w-8\" />\r\n+                <FaPlayCircle className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\" />\r\n               )}\r\n             </button>\r\n             <GrCaretNext\r\n+              className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\"\r\n               onClick={handleNext}\r\n-              className=\"h-8 w-8 cursor-pointer\"\r\n             />\r\n           </div>\r\n-          <div\r\n-            ref={progressBarRef}\r\n-            className=\"h-1 bg-gray-600 rounded-full cursor-pointer\"\r\n-            onClick={handleProgressClick}\r\n-          >\r\n+\r\n+          {/* Progress Bar */}\r\n+          <div className=\"flex items-center gap-3 w-full\">\r\n+            <span className=\"text-xs\">{formatTime(currentTime)}</span>\r\n             <div\r\n-              className=\"h-full bg-green-500\"\r\n-              style={{ width: `${(currentTime / duration) * 100}%` }}\r\n-            />\r\n+              ref={progressBarRef}\r\n+              className=\"flex-1 h-1 bg-gray-600 rounded-full cursor-pointer\"\r\n+              onClick={handleProgressClick}\r\n+            >\r\n+              <div\r\n+                className=\"h-full bg-green-500 rounded-full relative\"\r\n+                style={{ width: `${(currentTime / duration) * 100}%` }}\r\n+              >\r\n+                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 w-3 h-3 bg-white rounded-full shadow-md transform scale-0 hover:scale-100 transition-transform\" />\r\n+              </div>\r\n+            </div>\r\n+            <span className=\"text-xs\">{formatTime(duration)}</span>\r\n           </div>\r\n         </div>\r\n \r\n         {/* Volume Control */}\r\n-        <button onClick={toggleMute}>\r\n-          {isMuted ? <CiVolumeMute /> : <CiVolume />}\r\n-        </button>\r\n-        <input\r\n-          type=\"range\"\r\n-          min=\"0\"\r\n-          max=\"100\"\r\n-          value={isMuted ? 0 : volume}\r\n-          onChange={handleVolumeChange}\r\n-        />\r\n+        <div className=\"flex items-center gap-2\">\r\n+          <button onClick={toggleMute} className=\"focus:outline-none\">\r\n+            {isMuted ? (\r\n+              <CiVolumeMute className=\"h-6 w-6 cursor-pointer\" />\r\n+            ) : (\r\n+              <CiVolume className=\"h-6 w-6 cursor-pointer\" />\r\n+            )}\r\n+          </button>\r\n+          <input\r\n+            type=\"range\"\r\n+            min=\"0\"\r\n+            max=\"100\"\r\n+            value={isMuted ? 0 : volume}\r\n+            className=\"w-20 cursor-pointer\"\r\n+            onChange={handleVolumeChange}\r\n+          />\r\n+        </div>\r\n       </div>\r\n     </footer>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1740744356861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,10 +100,16 @@\n       setIsLoading(false);\r\n       return;\r\n     }\r\n \r\n-    const audio = new Audio(currentSong.audio);\r\n-    audioRef.current = audio;\r\n+    if (audioRef.current) {\r\n+      audioRef.current.src = currentSong.audio;\r\n+    } else {\r\n+      audioRef.current = new Audio(currentSong.audio);\r\n+    }\r\n+  \r\n+    const audio = audioRef.current;\r\n+  \r\n     setIsLoading(true);\r\n \r\n     const handleLoadedMetadata = () => {\r\n       setDuration(audio.duration);\r\n"
                }
            ],
            "date": 1740726708701,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { FaRegPauseCircle, FaPlayCircle } from \"react-icons/fa\";\r\nimport { GrCaretPrevious, GrCaretNext } from \"react-icons/gr\";\r\nimport { CiVolume, CiVolumeMute } from \"react-icons/ci\";\r\nimport { PlayerProps } from \"../types/Interface\";\r\nimport { Artist } from \"../DummyData\";\r\n\r\nconst Player: React.FC<PlayerProps> = ({ currentSong, onNext, onPrevious }) => {\r\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n  const [currentTime, setCurrentTime] = useState<number>(0);\r\n  const [duration, setDuration] = useState<number>(0);\r\n  const [volume, setVolume] = useState<number>(100);\r\n  const [isMuted, setIsMuted] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  const audioRef = useRef<HTMLAudioElement | null>(null); // Typed as HTMLAudioElement or null\r\n  const progressBarRef = useRef<HTMLDivElement | null>(null); // Typed as HTMLDivElement or null\r\n\r\n  // Find artist associated with the current song\r\n  const artist = Artist.find((artist) => artist.id === currentSong?.artistId);\r\n\r\n  const handleNext = useCallback(() => {\r\n    if (typeof onNext === \"function\") {\r\n      setIsPlaying(false);\r\n      onNext();\r\n    }\r\n  }, [onNext]);\r\n\r\n  const handlePrevious = useCallback(() => {\r\n    if (typeof onPrevious === \"function\") {\r\n      setIsPlaying(false);\r\n      onPrevious();\r\n    }\r\n  }, [onPrevious]);\r\n\r\n  const handlePlayPause = useCallback(() => {\r\n    if (!audioRef.current || !currentSong) return;\r\n\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.play().catch((error) => {\r\n        console.error(\"Playback failed:\", error);\r\n        setIsPlaying(false);\r\n      });\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  }, [isPlaying, currentSong]);\r\n\r\n  const handleVolumeChange = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newVolume = parseInt(e.target.value);\r\n      setVolume(newVolume);\r\n      if (audioRef.current) {\r\n        audioRef.current.volume = newVolume / 100;\r\n        setIsMuted(newVolume === 0);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const toggleMute = useCallback(() => {\r\n    if (!audioRef.current) return;\r\n\r\n    if (isMuted) {\r\n      audioRef.current.volume = volume / 100;\r\n      setIsMuted(false);\r\n    } else {\r\n      audioRef.current.volume = 0;\r\n      setIsMuted(true);\r\n    }\r\n  }, [isMuted, volume]);\r\n\r\n  const handleProgressClick = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!audioRef.current || !progressBarRef.current || !currentSong) return;\r\n\r\n      const progressBar = progressBarRef.current;\r\n      const rect = progressBar.getBoundingClientRect();\r\n      const percent = (e.clientX - rect.left) / rect.width;\r\n      const newTime = percent * duration;\r\n\r\n      audioRef.current.currentTime = newTime;\r\n      setCurrentTime(newTime);\r\n    },\r\n    [duration, currentSong]\r\n  );\r\n\r\n  const formatTime = useCallback((time: number): string => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!currentSong) {\r\n      setIsPlaying(false);\r\n      setCurrentTime(0);\r\n      setDuration(0);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    const audio = new Audio(currentSong.audio);\r\n    audioRef.current = audio;\r\n    setIsLoading(true);\r\n\r\n    const handleLoadedMetadata = () => {\r\n      setDuration(audio.duration);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(audio.currentTime);\r\n    };\r\n\r\n    const handleEnded = () => {\r\n      setIsPlaying(false);\r\n      handleNext();\r\n    };\r\n\r\n    const handleError = (event: ErrorEvent) => {\r\n      const error = event.error;\r\n      console.error(\"Audio error:\", error);\r\n      setIsLoading(false);\r\n      setIsPlaying(false);\r\n    };\r\n\r\n    audio.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\r\n    audio.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n    audio.addEventListener(\"ended\", handleEnded);\r\n    audio.addEventListener(\"error\", handleError);\r\n\r\n    // Set initial volume\r\n    audio.volume = volume / 100;\r\n\r\n    // Auto play the new song\r\n    audio\r\n      .play()\r\n      .then(() => {\r\n        setIsPlaying(true);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Auto-play failed:\", error);\r\n        setIsLoading(false);\r\n      });\r\n\r\n    return () => {\r\n      audio.pause();\r\n      audio.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\r\n      audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n      audio.removeEventListener(\"ended\", handleEnded);\r\n      audio.removeEventListener(\"error\", handleError);\r\n      audioRef.current = null;\r\n    };\r\n  }, [currentSong, volume, handleNext]);\r\n\r\n  // Keyboard controls\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      if (!currentSong) return;\r\n\r\n      switch (e.code) {\r\n        case \"Space\":\r\n          e.preventDefault();\r\n          handlePlayPause();\r\n          break;\r\n        case \"ArrowRight\":\r\n          handleNext();\r\n          break;\r\n        case \"ArrowLeft\":\r\n          handlePrevious();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyPress);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyPress);\r\n  }, [handlePlayPause, handleNext, handlePrevious, currentSong]);\r\n\r\n  if (!currentSong) {\r\n    return (\r\n      <footer className=\"p-4 bg-[#222222] text-white w-full fixed bottom-0 h-[10%] flex items-center justify-center\">\r\n        <div className=\"text-gray-400\">No song selected</div>\r\n      </footer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <footer className=\"p-4 bg-[#222222] text-white w-full fixed bottom-0 h-[10%] flex items-center justify-center\">\r\n      <div className=\"flex items-center justify-between w-full\">\r\n        {/* Song Info */}\r\n        <div className=\"flex items-center justify-center\">\r\n          <img\r\n            src={currentSong.img}\r\n            alt={currentSong.title}\r\n            className=\"h-12 w-12 rounded-md mx-auto object-cover\"\r\n          />\r\n          <div className=\"flex flex-col ml-2\">\r\n            <p className=\"text-sm font-semibold\">{currentSong.title}</p>\r\n            <p className=\"text-xs text-gray-400\">\r\n              {artist ? artist.name : \"Unknown Artist\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Player Controls */}\r\n        <div className=\"flex flex-col items-center flex-1 max-w-2xl mx-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <GrCaretPrevious\r\n              className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\"\r\n              onClick={handlePrevious}\r\n            />\r\n            <button\r\n              onClick={handlePlayPause}\r\n              disabled={isLoading}\r\n              className=\"focus:outline-none\"\r\n            >\r\n              {isLoading ? (\r\n                <div className=\"h-8 w-8 animate-pulse bg-gray-600 rounded-full\" />\r\n              ) : isPlaying ? (\r\n                <FaRegPauseCircle className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\" />\r\n              ) : (\r\n                <FaPlayCircle className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\" />\r\n              )}\r\n            </button>\r\n            <GrCaretNext\r\n              className=\"h-8 w-8 cursor-pointer hover:opacity-80 transition-opacity\"\r\n              onClick={handleNext}\r\n            />\r\n          </div>\r\n\r\n          {/* Progress Bar */}\r\n          <div className=\"flex items-center gap-3 w-full\">\r\n            <span className=\"text-xs\">{formatTime(currentTime)}</span>\r\n            <div\r\n              ref={progressBarRef}\r\n              className=\"flex-1 h-1 bg-gray-600 rounded-full cursor-pointer\"\r\n              onClick={handleProgressClick}\r\n            >\r\n              <div\r\n                className=\"h-full bg-green-500 rounded-full relative\"\r\n                style={{ width: `${(currentTime / duration) * 100}%` }}\r\n              >\r\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 w-3 h-3 bg-white rounded-full shadow-md transform scale-0 hover:scale-100 transition-transform\" />\r\n              </div>\r\n            </div>\r\n            <span className=\"text-xs\">{formatTime(duration)}</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Volume Control */}\r\n        <div className=\"flex items-center gap-2\">\r\n          <button onClick={toggleMute} className=\"focus:outline-none\">\r\n            {isMuted ? (\r\n              <CiVolumeMute className=\"h-6 w-6 cursor-pointer\" />\r\n            ) : (\r\n              <CiVolume className=\"h-6 w-6 cursor-pointer\" />\r\n            )}\r\n          </button>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            value={isMuted ? 0 : volume}\r\n            className=\"w-20 cursor-pointer\"\r\n            onChange={handleVolumeChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"
        }
    ]
}